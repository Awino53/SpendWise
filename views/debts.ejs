<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/main.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <title>Debts</title>
  </head>
  <body>
    <div class="header">
      <!-- Include the shared header -->
      <%- include('header.ejs') %>
    </div>
    <h1>debts</h1>

    <!-- Table for Debts -->
    <section>
      <table>
        <thead>
          <tr>
            <th>Description</th>
            <th>Amount (ksh)</th>
            <th>Balance</th>
            <th>Date</th>
          </tr>
        </thead>
        <tbody>
          <% debts.forEach(debt => { %>
          <tr>
            <td><%= debt.description %></td>
            <td><%= debt.amount %></td>
            <td><%= debt.balance %></td>
            <td><%= debt.date %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </section>
    <section>
      <h2>Debt Distribution</h2>
      <canvas id="debtChart" width="400" height="400"></canvas>
    </section>

    <footer>
      <a href="/transactions">View Transactions</a> |
      <a href="/savings">View Savings</a> |
      <a href="/logout">Logout</a>
    </footer>
 

    <script>
      // Predefine the data from the server-side in the script
      const debtDescriptions = JSON.parse(
        "<%- JSON.stringify(debts.map(debt => debt.description)) %>"
      );
      const debtAmounts = JSON.parse(
        "<%- JSON.stringify(debts.map(debt => debt.amount)) %>"
      );
      const debtBalances = JSON.parse(
        "<%- JSON.stringify(debts.map(debt => debt.balance)) %>"
      );

      console.log(debtDescriptions); // Check the descriptions
      console.log(debtBalances); // Check the balances
      console.log(debtAmounts); // Check the amounts
      // Data for chart
      const debtData = {
        labels: debtDescriptions,
        datasets: [
          {
            label: "Debt Amounts",
            data: debtBalances, // Show remaining balance for each debt
            backgroundColor: [
              "rgba(255, 99, 132, 0.2)",
              "rgba(54, 162, 235, 0.2)",
              "rgba(255, 206, 86, 0.2)",
              "rgba(75, 192, 192, 0.2)",
              "rgba(153, 102, 255, 0.2)",
              "rgba(255, 159, 64, 0.2)",
            ],
            borderColor: [
              "rgba(255, 99, 132, 1)",
              "rgba(54, 162, 235, 1)",
              "rgba(255, 206, 86, 1)",
              "rgba(75, 192, 192, 1)",
              "rgba(153, 102, 255, 1)",
              "rgba(255, 159, 64, 1)",
            ],
            borderWidth: 1,
          },
          {
            label: "Paid Amounts",
            data: debtAmounts.map((amount) => amount - debtBalances), // Calculate paid amounts
            backgroundColor: [
              "rgba(255, 99, 132, 0.5)",
              "rgba(54, 162, 235, 0.5)",
              "rgba(255, 206, 86, 0.5)",
              "rgba(75, 192, 192, 0.5)",
              "rgba(153, 102, 255, 0.5)",
              "rgba(255, 159, 64, 0.5)",
            ],
            borderColor: [
              "rgba(255, 99, 132, 1)",
              "rgba(54, 162, 235, 1)",
              "rgba(255, 206, 86, 1)",
              "rgba(75, 192, 192, 1)",
              "rgba(153, 102, 255, 1)",
              "rgba(255, 159, 64, 1)",
            ],
            borderWidth: 1,
          },
        ],
      };

      // Render the chart with updated data
      const ctx = document.getElementById("debtChart").getContext("2d");
      const debtChart = new Chart(ctx, {
        type: "pie",
        data: debtData,
      });
    </script>
  </body>
</html>
